(ns drffront.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require
   [cljs.core.async :refer [<!]]
   [cljs-http.client :as http]
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))

;; -------------------------
;; Routes

(def service-routes
  {:controls "http://localhost:8000/api/control/"
   :riders "http://localhost:8000/api/rider/"})

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]
    ["/controls" :controls]
    ["/riders" :riders]
    ]))


(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to drffront"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of drffront"]]
      [:li [:a {:href "/broken/link"} "Broken link"]]]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of drffront"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of drffront")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About drffront"]]))

(defn loaddata [atm url]
  (go (let [response (<! (http/get url
                                   {:with-credentials? false}))]
        (reset! atm (:body response))
        )))

(defn controls-page []
  (let [controls (atom [])]
    (loaddata controls (:controls service-routes))
    (fn [] [:span.main
            [:h1 "Controls Page"]
            (for [control @controls]
              ^{:key (:id control)} [:div (:id control) " " (:name control) " "  (:distance control) [:br]])])))

(defn riders-page []
  (let [riders (atom [])]
    (loaddata riders (:riders service-routes))
    (fn [] [:span.main
            [:h1 "Riders Page"]
            (for [rider @riders]
              ^{:key (:id rider)} [:div (:id rider) " " (:first_name rider) " "  (:last_name rider) " " (:country rider) [:br]])])))

;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page
    :controls #'controls-page
    :riders #'riders-page
    ))

;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :controls)} "Controls"] " | "
         [:a {:href (path-for :riders)} "Riders"] " | "
         [:a {:href (path-for :about)} "About drffront"]]]
       [page]
       [:footer
        [:p "drffront was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
